Automated testing is seen as a key part of Grails, implemented using [Groovy Tests|http://groovy.codehaus.org/Testing+Guide]. Hence, Grails provides many ways to making testing easier from low level unit testing to high level functional tests. This section details the different capabilities that Grails offers in terms of testing.

The first thing to be aware of is that all of the @create-*@ commands actually end up creating @integration@ tests automatically for you. For example say you run the [create-controller|commandLine] command as follows:

{code:java}
grails create-controller simple
{code}

Not only will Grails create a controller at @grails-app/controllers/SimpleController.groovy@, but also an integration test at @test/integration/SimpleControllerTests.groovy@. What Grails won't do however is populate the logic inside the test! That is left up to you.

Once you have done this, you can then execute all the tests with the [test-app|commandLine] command:

{code:java}
grails test-app
{code}

The above command will produce output such as:

{code:java}
-------------------------------------------------------
Running Unit Tests...
Running test FooTests...FAILURE
Unit Tests Completed in 464ms ...
-------------------------------------------------------

Tests failed: 0 errors, 1 failures
{code}

Whilst reports will have been written out the @test/reports@ directory. You can also run an individual test by specifying the name of the test (without the @Tests@ suffix) to run:

{code:java}
grails test-app SimpleController
{code}

In addition, you can run a number of tests by specifying each ones name separated by a space:

{code:java}
grails test-app SimpleController BookController
{code}

