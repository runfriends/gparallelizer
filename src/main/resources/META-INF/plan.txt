    Document before next release
    todo add custom DSL definitions
    todo SafeVariables should give readers higher priority - do them synchronously
    todo removed ForkJoin flag
    todo enable wait for SafeVariable
    todo rename SafeVariable - Safe, Agent
    todo add generics to SafeVariable
    todo make pooled actors use receive()
    todo eachWithIndexAsync(), grepAsync(), groupByAsync()
    todo merge pooled and threaded actors

    Planned for the next release


    todo tune maven repository upload - from CI?
    todo tag sources at releases

    todo enable @Immutable in code with latest Maia
    
    todo DataFlows
    todo Detecting deadlock in the DataFlows class
    todo used generics with DataFlows to support DataFlowVariable.val type hints in IDE

    todo remove messages and exceptions from the test output
    todo change actor group for DFVs

    todo leverage dynamic Groovy dispatch for message dispatch
def actor = actor {
   loop {
      react {
         on.plus { int x, int y ->
            reply x + y
         }

         on.minus { int x, int y ->
            reply x - y
         }
      }
   }
}

and the we can do

assertEquals 5, actor.minus ( 10,  actor.plus(2, 3) )

todo consider removing multiple messages for react()
todo consider removing dynamic replies on messages

    Backlog
    todo CSP
    //todo out-of-order message processing
    todo actor groups could manage actors and give public access to them
    todo consider using AST transformations to generate CPS (continuation-passing style) for event-driven actors to offer a frendlier way to code them
    todo add a script task to download all dependencies for IDEs
    todo remove start/stop methods from actors
    todo allow join on groups of actors or Dataflow treads
    todo clean issues and todos
    todo Logging policy - perhaps leveraging the current lifecycle methods
    todo Maybe SafeVariables could be used for ActorMetaClass
    todo allow non-blocing io operations in actors
    todo unify actors and pooled actors behavior on timeout and exception, (retry after timeout and exception or stop)


    //todo consider extensibility for actors - custom schedulers
    //todo consider using builder for message handling
    //todo optimize AsyncUtil implementation to split collections among available threads
    //todo send returning Future for actor reply

    //todo consider the asynchronous metaclass
    //todo use AST transformation to turn actors methods into async processing
    //todo try the fixes for the MixinTest
    //todo support mixins for event-driven actors

    Speed-up tips
    //todo use TaskBarrier instead of CountDownLatch in AbstractThreadActor - need to resolve blocking on the message queue
    //todo use LinkedTransferQueue with ForkJoin
    //todo remove type info for speed-up
    //todo ActorAction into Java
    //todo speedup actor creation
    //todo switch each to for loops where helping performance
    //todo reconsider locking in Actors
    //todo implement in Java
    //todo consider flow control to throttle message production
    //todo resize the pool if all threads are busy or blocked
    //todo rewrite the pool implementation
    //todo asynchronous race-free non-blocking queues

    To consider
    //todo multiple loops
    //todo exit the current loop
    //todo enable on Google App Engine
    //todo consider other types of queues
    //todo add sendLater(Duration) and sendAfterDone(Future)
    //todo consider pass by copy (clone, serialization) for mutable messages, reject mutable messages otherwise
    //todo unify and publish spawn operation and mail boxes
    //todo associate a mail box with each thread, not only with actors
    //todo add generics to actors



CPS
When I looked into Scala actors, I didn't like the fact that event-
based actors needed to be written in continuation-passing style (CPS).
A user really shouldn't have to worry about this (as in Erlang). Have
you considered using an AST transform to rewrite event-based actor
code to CPS? (Scala 2.8 will introduce continuations, implemented as a
compiler plugin. I think it's planned to leverage them for the actors
library).
