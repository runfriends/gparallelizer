//  GParallelizer
//
//  Copyright © 2008-9  The original author or authors
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

//  Author:  Václav Pech
//  Author: Russel Winder

import java.text.SimpleDateFormat

ant.property(file: 'local.build.properties')
ant.property(file: 'build.properties')

usePlugin 'groovy'
usePlugin 'maven'

defaultTasks 'test'

archivesBaseName = 'gparallelizer'
group = 'org.gparallelizer'
version = '0.8.5'

manifest.mainAttributes(
        'Implementation-Title': 'gparallelizer',
        'Implementation-Version': version,
        'provider': 'Vaclav Pech'
)

repositories {
    mavenCentral()
    mavenRepo urls: ['http://download.java.net/maven/2/', 'http://repository.jboss.org/maven2/']
    mavenRepo urls: ['file://' + System.properties.'user.home' + '/.m2/repository']
    flatDir name: 'localRepository', dirs: 'lib'
}

configurations {
    deployerJars
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: ant.project.properties.groovyVersion
    testCompile group: 'junit', name: 'junit', version: ant.project.properties.junitVersion
    compile group: 'org.coconut.forkjoin', name: 'jsr166y', version: ant.project.properties.jsr166yVersion
    compile group: 'org.jboss.netty', name: 'netty', version: ant.project.properties.nettyVersion
    deployerJars group: 'org.jvnet.wagon-svn', name: 'wagon-svn', version: ant.project.properties.wagonSvnVersion
}

//  To get the details of the "unchecked" issues.
compile.compilerArgs = ['-Xlint:unchecked']

//todo remove potentially once fixed in gradle
compileTest.dependsOn compile

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(':release')) {
        final Date date = new Date()
        version += '-SNAPSHOT' + new SimpleDateFormat('yyMMddHHmmssZ').format(date)
    }
}
task release(dependsOn: ['dists', 'test']) << {
    println 'We release now'
}

uploadArchives {
    repositories.mavenDeployer {
        uniqueVersion = false
        configuration = configurations.deployerJars
        repository(url: 'java-net:/maven2-repository/trunk/repository/') {
        }
    }
}

def titleForDocumentation = archivesBaseName + ' ' + version
def copyrightString = 'Copyright &#169; 2008&#8211;2009  V&#225;clav Pech.  All Rights Reserved.'
def packageTitle = group

//todo consider removing javadoc
javadoc {
    dependsOn('compile')
    options.subPackages(packageTitle)
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)
}
javadoc.doFirst {
    javadoc.title = titleForDocumentation
    javadoc.options.docTitle = javadoc.title
}

groovydoc {
  dependsOn('compile')
  //options.subPackages('org.gparallelizer')
  //options.overview('overview.html')
  //options.showAll()
  //options.encoding('UTF-8')
  //options.setUse(true)
  ////options.author(true)
  ////options.version(true)
  //options.windowTitle(packageTitle)
  //options.docTitle(packageTitle)
  //options.footer(copyrightString)
}

task myGroovyDoc ( dependsOn : 'compile' , description : 'Create the GroovyDoc API documentation.' ) << {
  def groovydocDirPath = groovydoc.destinationDir
  def packageIncludeSpec = 'org.gparallelizer.*'
  ant.delete ( dir : groovydocDirPath , quiet : 'true' )
  ant.mkdir ( dir : groovydocDirPath )
  def sourceDirectory = source.main.groovy.srcDirs.toArray ( )[0]
  ant.taskdef ( name : 'groovydoc' , classname : 'org.codehaus.groovy.ant.Groovydoc' )
  ant.groovydoc (
                 sourcePath : sourceDirectory ,
                 destDir : groovydocDirPath ,
                 packageNames : packageIncludeSpec ,
                 overview : 'overview.html' ,
                 'private' : 'true' ,
                 use : 'true' ,
                 //author : 'true' ,
                 //version : 'true' ,
                 windowTitle : packageTitle ,
                 docTitle : packageTitle ,
                 header : packageTitle ,
                 footer : copyrightString,
                 //source : sourceCompatibility
                 )
}

task documentation(dependsOn: ['javadoc', 'myGroovyDoc'], description: 'Create the API documentation.')

task zipDoc(type: Zip, dependsOn: documentation) {
    appendix = 'docs'
//    fileSet(baseDir: docsDir)
    fileSet(dir: docsDir)  //todo enable
}

task zipSrc(type: Zip) {
    appendix = 'src'
//    fileSet(baseDir: source.main.groovy.srcDirs.iterator().next())
    fileSet(dir: source.main.groovy.srcDirs.iterator().next())  //todo enable
}

task zipSamples(type: Zip) {
    appendix = 'samples'
//    fileSet(baseDir: source.test.groovy.srcDirs.iterator().next(), includes: ['org/gparallelizer/samples/**'])
    fileSet(dir: source.test.groovy.srcDirs.iterator().next(), includes: ['org/gparallelizer/samples/**'])  //todo enable
}

task wrapper(type: Wrapper) {
    jarPath = 'wrapper'
    gradleVersion = '0.8'
}

//todo test fork frequency in gradle 0.9
