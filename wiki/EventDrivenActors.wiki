#summary Event-driven actors share a pool of threads to process their messages asynchronously.
#labels Featured,Phase-Design,Phase-Implementation

= Use of event-driven actors =

_Event-driven actors_ share a *pool* of threads, which are dynamically assigned to actors when the actors need to *react* to messages sent to them. The threads are returned back to the pool once a message has been processed and the actor is idle waiting for some more messages to arrive. Actors become detached from the underlying threads and so a relatively small thread pool can serve potentially unlimited number of actors. Virtually unlimited scalability in number of actors is the main advantage of _event-based actors_ over _thread-bound ones_, where each actor has its own exclusive background thread associated with it.

Here are some examples of how to use _event-driven_ actors. This is how you create an actor that prints out all messages that it receives.

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

def console = actor {
    loop {
        react {
            println it
        }
    }
}}}

Notice the _loop()_ method call, which ensures that the actor doesn't stop after having processed the first message.

As an alternative you can extend the AbstractPooledActor class and override the _act()_ method.

{{{
class CustomActor extends AbstractPooledActor {
    @Override protected void act() {
        loop {
            react {
                println it
            }
        }
    }
}

def console=new CustomActor()
}}}

Once you have the actor, you need to start it so that it attaches itself to the thread pool and can start accepting messages.

{{{
console.start()
console.send('Message')
}}}

The leftShift (<<) operator can be used to send messages to actors as a replacement for the _send()_ method.

{{{
console << 'Message'
}}}

===Creating an asynchronous service===

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

final def decryptor = actor {
    loop {
        react {String message->
            reply message.reverse()
        }
    }
}.start()

actor {
    decryptor.send 'suonorhcnysa si yvoorG'
    react {
        println 'Decrypted message: ' + it
    }
}.start()
}}}
As you can see, you create new actors with the _actor()_ method passing in the actor's body as a closure parameter. Inside the actor's body you can use _loop()_ to iterate, _react()_ to receive messages and _reply()_ to send a message to the actor, which has sent the currently processed message. With the _start()_ method you schedule the actor to the underlying thread pool for processing. When the decryptor actor doesn't find a message in its message queue, the _react()_ method gives up the thread and returns it back to the thread pool for other actors to pick up. Only after a new message arrives to the actor's message queue, the closure of the _react()_ method gets scheduled for processing with the pool. Event-based actors internally simulate continuations - actor's work is split into sequentially run chunks, which get invoked once a message is available in the inbox. Each chunk for a single actor can be performed by different thread from the thread pool.

Groovy's flexible syntax with closures allows our library to offer multiple ways to define actors. For instance, here's an example of an actor that waits for up to 30 seconds to receive a message, prints it out and terminates. Actors allow time DSL defined by org.codehaus.groovy.runtime.TimeCategory class to be used for timeout specification to the _react()_ method.

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

def me = actor {
    friend.send('Hi')
    react(10.seconds) {
        //continue conversation
    }
}.start()

me.metaClass.onTimeout = {->friend.send('I see, busy as usual. Never mind.')}
}}}
Notice the possibility to use Groovy meta-programming to define actor's lifecycle notification methods (e.g. _onTimeout()_) dynamically.

===Simple calculator===

A little bit more realistic example of an event-driven actor that receives two numeric messages, sums them up and sends the result to the console actor.
{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

//not necessary, just showing that a single-threaded pool can still handle multiple actors
getPool().initialize 1

final def console = actor {
    loop {
        react {
            println 'Result: ' + it
        }
    }
}.start()

final def calculator = actor {
    react {a ->
        react {b ->
            console.send(a + b)
        }
    }
}.start()

calculator.send 2
calculator.send 3
}}}

You can group reception of multiple messages in a single _react()_ call.

{{{
final def calculator = actor {
    react {a, b ->
        console.send(a + b)
    }
}.start()
}}}
Notice that event-driven actors require special care regarding the _react()_ method. Since _event_driven actors_ need to split the code into independent chunks assignable to different threads sequentially and *continuations* are not natively supported on JVM, the chunks are created artificially with tasks and exceptions. As a result the _react()_ and _loop()_ methods never return normally and actors' code must be structured accordingly. Again, this is in line with what Scala actors do.
 
===Concurrent Merge Sort Example===

For comparison I'm also including a more involved example performing a concurrent merge sort of a list of integers using actors. You can see that thanks to flexibility of Groovy we came pretty close to the Scala's model, although I still miss Scala's pattern matching for message handling.

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

Closure createMessageHandler(def parentActor) {
    return {
        react {List<Integer> message ->
            assert message != null
            switch (message.size()) {
                case 0..1:
                    parentActor.send(message)
                    break
                case 2:
                    if (message[0] <= message[1]) parentActor.send(message)
                    else parentActor.send(message[-1..0])
                    break
                default:
                    def splitList = split(message)

                    def child1 = actor(createMessageHandler(delegate))
                    def child2 = actor(createMessageHandler(delegate))
                    child1.start().send(splitList[0])
                    child2.start().send(splitList[1])

                    react {message1, message2 ->
                        parentActor.send merge(message1, message2)
                    }
            }
        }
    }
}

def console = actor {
    react { println "Sorted array:\t${it}" }
}.start()

def sorter = actor(createMessageHandler(console))
sorter.start().send([1, 5, 2, 4, 3, 8, 6, 7, 3, 9, 5, 3])
}}}

Since _event-driven actors_ reuse threads from a pool, the script will work with virtually *any size of a thread pool*, no matter how many actors are created along the way.

For brevity I didn't include the two helper methods split() and merge() in the code snippet. You can find them below.
{{{
def split(List<Integer> list) {
    int listSize = list.size()
    int middleIndex = listSize / 2
    def list1 = list[0..<middleIndex]
    def list2 = list[middleIndex..listSize - 1]
    return [list1, list2]
}

List<Integer> merge(List<Integer> a, List<Integer> b) {
    int i = 0, j = 0
    final int newSize = a.size() + b.size()
    List<Integer> result = new ArrayList<Integer>(newSize)

    while ((i < a.size()) && (j < b.size())) {
        if (a[i] <= b[j]) result << a[i++]
        else result << b[j++]
    }

    if (i < a.size()) result.addAll(a[i..-1])
    else result.addAll(b[j..-1])
    return result
}
}}}

===Actor lifecycle methods===
Each Actor can define lifecycle observing methods, which will be called whenever a certain lifecycle event occurs.
  * afterStart() - called immediately after the Actor has been started, before the act() method is called the first time.
  * afterStop(List undeliveredMessages) - called right after the actor is stopped, passing in all the unprocessed messages from the queue.
  * onInterrupt(InterruptedException e) - called when the actor's thread gets interrupted. Thread interruption will result in the stopping the actor in any case.
  * onTimeout() - called when no messages are sent to the actor within the timeout specified for the currently blocking react method. Timeout will result in stopping the actor.
  * onException(Throwable e) - called when an exception occurs in the actor's event handler. Actor will stop after return from this method.

You can either define the methods statically in your Actor class or add them dynamically to the actor's metaclass:
{{{
def myActor = actor {...}

myActor.metaClass.onException = {
    log.error('Exception occurred', it)
}
}}}

===Pool management===
The actors' thread pool follows the singleton pattern. You retrieve the pool from _PooledActors_ class or a _PooledActorGroup_ class and manage it through the _Pool_ interface. The pool by default contains n + 1 threads, where n stands for the number of CPUs detected by the JVM. The _gparallelizer.poolsize_ system property may be used to modify the default pool size. The _resize()_ method allows you to change the pool size any time and the _resetDefaultSize()_ sets it back to the default value.
The pool contains daemon threads by default, but the daemon flag for _PooledActorGroup_ instances can be specified at their creation.
The _shutdown()_ method should be called when you need to safely finish all tasks, destroy the pool and stop all the threads in order to exit JVM. For daemon actor groups it is not mandatory to call _shutdown()_, but it ensures a consistent state at application termination.

{{{
... (n+1 threads in the default pool after startup)

PooledActors.defaultPooledActorGroup.threadPool.resize 1  //use one-thread pool

... (1 thread in the pool)

PooledActors.defaultPooledActorGroup.threadPool.resetDefaultSize()

... (n+1 threads in the pool)

PooledActors.defaultPooledActorGroup.threadPool.shutdown()
}}}

_Event-driven_ actors can be organized into groups and as a default there's always an application-wide actor group available. And just like the _PooledActors_ abstract factory can be used to create actors in the default group, custom groups can be used as abstract factories to create new actors instances belonging to them.

{{{
def daemonGroup = new PooledActorGroup(true)

def actor = daemonGroup.actor {
...
}
}}}

_Event-driven_ actors belonging to the same group on top of having the same *daemon thread flag* share the *underlying thread pool*. With pooled actor groups you can split your actors to leverage multiple thread pools of different sizes and so assign resources to different components of your system and tune their performance. 

{{{
def coreActors = new PooledActorGroup(false, 5)  //5 non-daemon threads pool
def helperActors = new PooledActorGroup(true, 1)  //1 daemon thread pool

def priceCalculator = coreActors.actor {
...
}

def paymentProcessor = coreActors.actor {
...
}

def emailNotifier = helperActors.actor {
...
}

def cleanupActor = helperActors.actor {
...
}
}}}

==Tips and tricks==
===Structuring actor's code===
When extending the _AbstractPooledActor_ class, you can call any actor's methods from within the _act()_ method and use the _react()_ or _loop()_ methods in them.
{{{
class MyActor extends AbstractPooledActor {

    protected void act() {
        handleA()
    }

    private void handleA() {
        react {a ->
            handleB(a)
        }
    }

    private void handleB(int a) {
        react {b ->
            println a + b
            reply a + b
        }
    }
}
}}}

Bear in mind that the methods _handleA()_ and _handleB()_ in all our examples never return, since they call _react()_, which itself never returns.

Alternatively, when using the _actor()_ factory method, you can add event-handling code through the meta class as closures.
{{{
Actor actor2 = actor {
    handleA()
}

actor2.metaClass {
    handleA = {->
        react {a ->
            handleB(a)
        }
    }

    handleB = {a ->
        react {b ->
            println a + b
            reply a + b
        }
    }
}
}}}

Closures, which have the actor set as their delegate can also be used to structure event-handling code.

{{{
Closure handleB = {a ->
    react {b ->
        println a + b
        reply a + b
    }
}

Closure handleA = {->
    react {a ->
        handleB(a)
    }
}

Actor actor3 = actor {
    handleA()
}
handleA.delegate = actor3
handleB.delegate = actor3
}}}
===Event-driven loops===
When coding event-driven actors you have to have in mind that calls to _react()_ and _loop()_ methods never return. This becomes a bit of a challenge once you try to implement any types of loops in your actors.
On the other hand, if you leverage the fact that _react()_ never returns, you may call methods recursively without fear to fill up the stack. Look at the examples below, which respectively use the three described techniques for structuring actor's code.

A subclass of _AbstractPooledActor_
{{{
class MyLoopActor extends AbstractPooledActor {

    protected void act() {
        outerLoop()
    }

    private void outerLoop() {
        react {a ->
            println 'Outer: ' + a
            if (a!=0) innerLoop()
            else println 'Done'
        }
    }

    private void innerLoop() {
        react {b ->
            println 'Inner ' + b
            if (b == 0) outerLoop()
            else innerLoop()
        }
    }
}
}}}

Enhancing the actor's metaClass

{{{
Actor actor = actor {
    outerLoop()
}

actor.metaClass {
    outerLoop = {->
        react {a ->
            println 'Outer: ' + a
            if (a!=0) innerLoop()
            else println 'Done'
        }
    }

    innerLoop = {->
        react {b ->
            println 'Inner ' + b
            if (b==0) outerLoop()
            else innerLoop()
        }
    }
}
}}}

Using Groovy closures

{{{
Closure innerLoop

Closure outerLoop = {->
    react {a ->
        println 'Outer: ' + a
        if (a!=0) innerLoop()
        else println 'Done'
    }
}

innerLoop = {->
    react {b ->
        println 'Inner ' + b
        if (b==0) outerLoop()
        else innerLoop()
    }
}

Actor actor = actor {
    outerLoop()
}
outerLoop.delegate = actor
innerLoop.delegate = actor
}}}

Plus don't forget about the possibility to use the actor's _loop()_ method to create a loop that never stops before the actor terminates.

{{{
class MyLoopActor extends AbstractPooledActor {

    protected void act() {
        loop {
            outerLoop()
        }
    }

    private void outerLoop() {
        react {a ->
            println 'Outer: ' + a
            if (a!=0) innerLoop()
            else println 'Done for now, but will loop again'
        }
    }

    private void innerLoop() {
        react {b ->
            println 'Inner ' + b
            if (b == 0) outerLoop()
            else innerLoop()
        }
    }
}
}}}