#summary Event-driven actors share a pool of threads to process messages asynchronously.
#labels Featured,Phase-Design,Phase-Implementation

= Use of event-driven actors =

_Event-driven actors_ share a *pool* of threads, which are dynamically assigned to actors when the actors need to *react* to a message sent to them. The threads are returned back to the pool once the message has been processed and the actor is idle waiting for some more messages to arrive. Actors become detached from the underlying threads and so a relatively small thread pool can serve potentially unlimited number of actors. Virtually unlimited scalability in number of actors is the main advantage of _event-based actors_ over _thread-bound ones_, where each actor has its own exclusive background thread associated with it.

Here are some examples of how to use _event-driven_ actors. This is how you create an actor that prints out all messages that it receives.

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

def actor = actor {
    loop {
        react {
            println it
        }
    }
}}}

Notice the _loop()_ method call, which ensures that the actor doesn't stop after having processed the first message.

As an alternative you can extend the AbstractPooledActor class and override the _act()_ method.

{{{
class CustomActor extends AbstractPooledActor {
    @Override protected void act() {
        loop [
            react {
                println it
            }
        }
    }
}

def actor=new CustomActor()
}}}

Once you have the actor, you need to start it so that it attaches itself to the thread pool and can start accepting messages.

{{{
actor.start()
actor.send('Message')
}}}

_Event-driven actors_ require special care regarding the _react()_ method. Since _event-driven actors_ need to split the code into independent chunks assignable to different threads sequentially and continuations are not natively supported on JVM, the chunks are created artificially with _Runnable_ tasks and exceptions. As a result the _react()_ and _loop()_ methods never return normally and actors' code must be structured accordingly.

===Creating an asynchronous service===

{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

final def decryptor = actor {
    loop {
        react {String message->
            reply message.reverse()
        }
    }
}.start()

actor {
    decryptor.send 'suonorhcnysa si yvoorG'
    react {
        println 'Decrypted message: ' + it
    }
}.start()
}}}
As you can see, you create new actors with the actor() method passing in the actor's body as a closure parameter. Inside the actor's body you can use loop() to iterate, react() to receive messages and reply() to send a message to the actor, which has sent you the currently processed message. With the start() method you schedule the actor to the underlying thread pool for processing. When the decryptor actor doesn't find a message in its message queue, the react() method gives up the thread and returns it back to the thread pool for other actors to pick up. Only after a new message arrives to the actor's message queue, the closure of the react() method gets scheduled for processing with the pool. Event-based actors internally simulate continuations - actor's work is split into chunks, each of which is processed in sequence, by different threads from the thread pool and potentially with pauses between the chunks.
 
Groovy's flexible syntax with closures allows our library to offer multiple ways to define actors. For instance, here's an example of an actor that waits for up to 30 seconds to receive a message, prints it out and terminates.

{{{
def actor = PooledActors.actor {
    react(30.seconds) {
        println it
    }
}
}}}

===Simple calculator===

A little bit more realistic example of an event-driven actor that receives two numeric messages, sums them up and sends the result to the console actor.
{{{
import static org.gparallelizer.actors.pooledActors.PooledActors.*

//not necessary, just showing that a single-threaded pool can still handle multiple actors
getPool().initialize 1

final def console = actor {
    loop {
        react {
            println 'Result: ' + it
        }
    }
}.start()

final def calculator = actor {
    react {a ->
        react {b ->
            console.send(a + b)
        }
    }
}.start()

calculator.send 2
calculator.send 3
}}}

Notice that event-driven actors require special care regarding the _react()_ method. Since _event_driven actors_ need to split the code into independent chunks assignable to different threads sequentially and *continuations* are not natively supported on JVM, the chunks are created artificially with tasks and exceptions. As a result the _react()_ and _loop()_ methods never return normally and actors' code must be structured accordingly. Again, this is in line with what Scala actors do.
 
===Concurrent Merge Sort Example===

For comparison I'm also including a more involved example performing a concurrent merge sort of a list of integers using actors. You can see that thanks to flexibility of Groovy we came pretty close to the Scala's model, although I still miss Scala's pattern matching for message handling.

{{{
Closure createMessageHandler(def parentActor) {
    return {
        react {List<Integer> message ->
            assert message != null
            switch (message.size()) {
                case 0..1:
                    parentActor.send(message)
                    break
                case 2:
                    if (message[0] <= message[1]) parentActor.send(message)
                    else parentActor.send(message[-1..0])
                    break
                default:
                    def splitList = split(message)

                    def child1 = actor(createMessageHandler(delegate))
                    def child2 = actor(createMessageHandler(delegate))
                    child1.start().send(splitList[0])
                    child2.start().send(splitList[1])

                    react {message1 ->
                        react {message2 ->
                            parentActor.send merge(message1, message2)
                        }
                    }
            }
        }
    }
}

def resultActor = actor {
    react { println "Sorted array:\t${it}" }
}.start()

def sorter = actor(createMessageHandler(resultActor))
sorter.start().send([1, 5, 2, 4, 3, 8, 6, 7, 3, 9, 5, 3])
}}}

Since _event-driven actors_ reuse threads from a pool, the script will work with virtually *any size of a thread pool*, no matter how many actors are created along the way.

For brevity I didn't include the two helper methods split() and merge() in the code snippet. You can find them below.
{{{
def split(List<Integer> list) {
    int listSize = list.size()
    int middleIndex = listSize / 2
    def list1 = list[0..<middleIndex]
    def list2 = list[middleIndex..listSize - 1]
    return [list1, list2]
}

List<Integer> merge(List<Integer> a, List<Integer> b) {
    int i = 0, j = 0
    final int newSize = a.size() + b.size()
    List<Integer> result = new ArrayList<Integer>(newSize)

    while ((i < a.size()) && (j < b.size())) {
        if (a[i] <= b[j]) result << a[i++]
        else result << b[j++]
    }

    if (i < a.size()) result.addAll(a[i..-1])
    else result.addAll(b[j..-1])
    return result
}
}}}

===Actor lifecycle methods===
Each Actor can define lifecycle observing methods, which will be called whenever a certain lifecycle event occurs.
  * afterStart() - called immediately after the Actor has been started, before the act() method is called the first time.
  * afterStop(List undeliveredMessages) - called right after the actor is stopped, passing in all the unprocessed messages from the queue.
  * onInterrupt(InterruptedException e) - called when the actor's thread gets interrupted. Thread interruption will result in the stopping the actor in any case.
  * onTimeout() - called when no messages are sent to the actor within the timeout specified for the currently blocking react method. Timeout will result in stopping the actor.
  * onException(Throwable e) - called when an exception occurs in the actor's event handler. Actor will stop after return from this method.

You can either define the methods statically in your Actor class or add them dynamically to the actor's metaclass:
{{{
def actor = Actors.actor {...}

actor.metaClass.onException = {
    log.error('Exception occurred', it)
}
}}}

===TimeCategory DSL use===
Actors allow time DSL defined by org.codehaus.groovy.runtime.TimeCategory class to be used for timeout specification to the react() method.
{{{
def me = Actors.actor {
    friend.send('Hi')
    react(10.seconds) {
        //continue conversation
    }
}

me.metaClass.onTimeout = {->friend.send('I see, busy as usual. Never mind.')}
}}}

===Actors as Mixins===
Actors can be mixed into other classes.
{{{
        Company.metaClass {
            mixin DefaultPooledActor

            act = {->
                loop {
                    react(100.years) {
                        println it
                    }
                }
            }

            afterStop = {List undeliveredMessages ->
                ...
            }
        }

final Company company = new Company(name: 'Company1', employees: ['Joe', 'Dave', 'Alice'])
company.start()
company.send("Message")
...
company.stop()
}}}

Actors can also extend individual instances only through mixins.
{{{
final Company company = new Company(name: 'Company1', employees: ['Joe', 'Dave', 'Alice'])

company.metaClass {
    mixin DefaultPooledActor

    act = {->
        loop {
            react(1.day) {
                println it
            }
        }
    }
}

company.start()
company.send("Message")
...
company.stop()

}}}