If you look under the covers of your computer, you'll most likely see a dual-core processor there.
Now, when parallel systems are the norm in the mainstream, it has become obvious that the common shared-memory multithreading causes more troubles than it solves.

Low-level concurrency handling is usually hard to get right. And it's not much fun either. In this hands-on session we will go through the concurrency options that GPars (http://gpars.codehaus.org), an open-source concurrency library for Groovy, gives to your Groovy applications. We'll cover parallel collection processing, map/reduce, fork/join, asynchronous closures, actors, dataflow concurrency and other concepts, which aim to make your Groovy code concurrent with little effort.
If you want to learn how to safely harness all the cores in modern processors, this session is for you.

Dynamic frameworks like Rails, Django and TurboGears helped pave the way to a more modern way of thinking about web applications. Grails builds on these concepts and dramatically reduces the complexity of building web applications on the Java platform. What makes it different, however, is that it does so by building on already established Java technology like Spring & Hibernate.                      

Grails is a full stack framework and attempts to solve as many pieces of the web development puzzle through the core technology and it's associated plug-ins. Included out the box are things like:

* An easy to use Object Relational Mapping (ORM) layer built on [Hibernate|http://www.hibernate.org]
* An expressive view technology called Groovy Server Pages (GSP)
* A controller layer built on "Spring":http://www.springframework.org MVC                                 
* A command line scripting environment built on the Groovy-powered "Gant":http://groovy.codehaus.org/Gant
* An embedded "Tomcat":http://tomcat.apache.org container which is configured for on the fly reloading
* Dependency injection with the inbuilt "Spring":http://www.springframework.org container
* Support for internationalization (i18n) built on Spring's core MessageSource concept
* A transactional service layer built on Spring's transaction abstraction

All of these are made easy to use through the power of the "Groovy":http://groovy.codehaus.org language and the extensive use of Domain Specific Languages (DSLs)

This documentation will take you through getting started with Grails and building web applications with the Grails framework. 