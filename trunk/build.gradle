//  GPars (formerly GParallelizer)
//
//  Copyright © 2008-9  The original author or authors
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

//  Author:  Václav Pech
//  Author: Russel Winder

import java.text.SimpleDateFormat
import org.codehaus.groovy.tools.RootLoader

ant.property(file: 'local.build.properties')
ant.property(file: 'build.properties')

usePlugin 'groovy'
usePlugin 'maven'

defaultTasks 'test'

archivesBaseName = 'gpars'
group = 'groovyx.gpars'
version = '0.9-beta-1'

manifest.mainAttributes(
        'Implementation-Title': archivesBaseName,
        'Implementation-Version': version,
        'provider': 'Vaclav Pech'
)

repositories {
    mavenCentral()
    mavenRepo urls: ['http://repository.jboss.org/maven2/']
    mavenRepo urls: ['file://' + System.properties.'user.home' + '/.m2/repository']
}

configurations {
    deployerJars
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion ?: '1.6.5'
    testCompile group: 'junit', name: 'junit', version: junitVersion ?: '4.7'
    compile group: 'org.coconut.forkjoin', name: 'jsr166y', version: jsr166yVersion ?: '070108'
    compile group: 'org.jboss.netty', name: 'netty', version: nettyVersion ?: '3.1.3.GA'
    deployerJars group: 'org.jvnet.wagon-svn', name: 'wagon-svn', version: wagonSvnVersion ?: '1.9'
}

//  To get the details of the "unchecked" issues.
compileGroovy.options.compilerArgs = ['-Xlint']

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(':release')) {
        final Date date = new Date()
        //  TODO: Should only put the date in the artefact name when uploading to the Maven repository, otherwise
        //  should just append SNAPSHOT.
        version += '-SNAPSHOT' + new SimpleDateFormat('-yyyyMMddHHmmssZ').format(date)
    }
}

task release(dependsOn: ['build']) << {
    println 'We release now'
}

uploadArchives {
    repositories.mavenDeployer {
        uniqueVersion = false
        configuration = configurations.deployerJars
        repository(url: 'java-net:/maven2-repository/trunk/repository/') {
        }
    }
}

def titleForDocumentation = archivesBaseName + ' ' + version
def copyrightString = 'Copyright &#169; 2008&#8211;2009  V&#225;clav Pech.  All Rights Reserved.'
def packageTitle = group

javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)
}
javadoc.doFirst {
    javadoc.title = titleForDocumentation
    javadoc.options.docTitle = javadoc.title
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
    packageNames = ['groovyx.gpars.*']
    overview = 'overview.html'
}

task documentation(dependsOn: ['javadoc', 'groovydoc'], description: 'Create the API documentation.')

task zipDoc(type: Zip, dependsOn: documentation) {
    appendix = 'docs'
    fileSet(dir: docsDir)
}

task zipSrc(type: Zip) {
    appendix = 'src'
    from sourceSets.main.allSource
}

//task zipSamples(dependsOn: 'demo', type: Zip) {
task zipSamples(type: Zip) {
    appendix = 'samples'
    from sourceSets.test.allSource.matching{
        include 'groovyx/gpars/samples/**'
    }
}

task wrapper(type: Wrapper) {
    jarPath = 'wrapper'
    gradleVersion = '0.8'
}

// todo (dk) needs more work:
task demo(dependsOn: 'compileGroovy') << {
    def excludes = [
            'DemoPotentialDeadlock.groovy',         // may deadlock (on purpose)
            'DemoNonDeterministicDeadlockWithDataFlows.groovy', // may deadlock (on purpose)
            'DemoDeadLock.groovy',                  // deadlock (on purpose)
            'DemoDiningPhilosophers.groovy',        // runs endlessly
            'DemoLoadBalancer.groovy',              // runs endlessly
            'DemoRockPaperScissors.groovy',         // runs endlessly
            'DemoEventMergeSort.groovy',            // use System.exit()
            'DataFlowDemo2.groovy',
            'DataFlowDemo3.groovy',
            'DataFlowDemo4.groovy',
            'DataFlowDemo5.groovy',
            'DataFlowDemo6.groovy',
            'DemoDataFlowStreamIteration.groovy',
            'DemoMixDataFlowWithActors.groovy',
            'DemoProducerConsumer1.groovy',
            'DemoProducerConsumer2.groovy',
            'DemoMashupWithMethods.groovy',
            'DemoPhysicalCalculations.groovy',
            'DemoSwing.groovy',
            'DemoSwingMashup.groovy',
    ]
    RootLoader rl = new RootLoader(this.class.classLoader)
    rl.addURL(new File('build/classes/main').toURL())
    //rl.addURL(new File('lib/groovy-all-1.7-beta-2-SNAPSHOT.jar').toURL()) // issue with ClassCastException
    rl.addURL(new File('lib/jsr166y-070108.jar').toURL())
    rl.addURL(new File('lib/netty-3.1.3.GA.jar').toURL())
    def shell = new GroovyShell(rl)
    def failed = []
    def ok = 0
    new File('src/test/groovy/').eachFileRecurse { File file ->
        if (file.isDirectory()) return
        if (file.canonicalPath.contains("/.")) return  // .svn and the likes
        if ( ! (file.name =~ /.*Demo.*\.groovy$/)) return // is a demo
        if ( file.name in excludes) return
        println "*** starting demo $file.name"
        try {
            shell.evaluate(file)
            ok += 1
        } catch (Exception ex) {
            failed << [file:file, exception: ex]
        }
        println "*** done"
    }
    println "=== demos: $ok ok, ${failed.size()} failed"
    failed.each{ println "${it.file}\n    ${it.exception}" }
}

//todo test fork frequency in gradle 0.9
